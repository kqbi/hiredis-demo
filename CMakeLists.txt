project(hiredis-demo)
cmake_minimum_required(VERSION 3.1.3)
#使能c++11
set(CMAKE_CXX_STANDARD 11)
#加载自定义模块
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

set(CMAKE_BUILD_TYPE "Release")
set(platform x64)

if (${CMAKE_BUILD_TYPE} MATCHES "Release")
    message(STATUS "Release版本")
    set(BuildType "Release")
else ()
    set(BuildType "Debug")
    message(STATUS "Debug版本")
endif ()

#设置bin和lib库目录
set(RELEASE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/release)
if (CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(system linux)
    set(THIRDPARTY "/home/vmns/3rdparty")
    set(HIREDIS_LIB libhiredis_static.a)
#    set(JSONCPP_LIB libjsoncpp.a)
#    set(OXF_LIB liboxf.a)
#    set(S_HTTPSERVER_LIB libS_HttpServer.a)
#    set(BOOST_DATE_TIME_LIB libboost_date_time.a)
#    set(BOOST_THREAD_LIB libboost_thread.a)
#    set(BOOST_LOG_LIB libboost_log.a)
#    set(BOOST_LOG_SETUP_LIB libboost_log_setup.a)
#    set(BOOST_FILESYSTEM_LIB libboost_filesystem.a)
#    set(BOOST_LOCALE_LIB libboost_locale.a)
#    set(BOOST_COROUTINE_LIB libboost_coroutine.a)
#    set(BOOST_CONTEXT_LIB libboost_context.a)
#    set(SOCI_CORE_LIB libsoci_core.a)
#    set(SOCI_MYSQL_LIB libsoci_mysql.a)
#    set(SOCI_SQLITE_LIB libsoci_sqlite3.a)
#    set(MQTT_C_LIB libpaho-mqtt3a.a)
#    set(MQTT_CPP_LIB libpaho-mqttpp3.a)
elseif (CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(system win)
    set(THIRDPARTY "D:/work/projects/3rdparty")
    set(HIREDIS_LIB hiredis_static.lib)
#    set(JSONCPP_LIB libjson-md.lib)
#    set(OXF_LIB oxf-md.lib)
#    set(S_HTTPSERVER_LIB S_HttpServer-md.lib)
#    set(BOOST_DATE_TIME_LIB libboost_date_time-vc141-mt-x64-1_72.lib)
#    set(BOOST_THREAD_LIB libboost_thread-vc141-mt-x64-1_72.lib)
#    set(BOOST_LOG_LIB libboost_log-vc141-mt-x64-1_72.lib)
#    set(BOOST_LOG_SETUP_LIB libboost_log_setup-vc141-mt-x64-1_72.lib)
#    set(BOOST_FILESYSTEM_LIB libboost_filesystem-vc141-mt-x64-1_72.lib)
#    set(BOOST_LOCALE_LIB libboost_locale-vc141-mt-x64-1_72.lib)
#    set(BOOST_COROUTINE_LIB libboost_coroutine-vc141-mt-x64-1_72.lib)
#    set(BOOST_CONTEXT_LIB libboost_context-vc141-mt-x64-1_72.lib)
#    set(SOCI_CORE_LIB libsoci_core_4_0.lib)
#    set(SOCI_MYSQL_LIB libsoci_mysql_4_0.lib)
#    set(SOCI_SQLITE_LIB libsoci_sqlite3_4_0.lib)
#    set(SQLITE_LIB sqlite3.lib)
#    set(MQTT_C_LIB paho-mqtt3a-static-md.lib)
#    set(MQTT_CPP_LIB paho-mqttpp3-static-md.lib)
#    set(GETOPT_LIB getopt-mt.lib)
endif ()

#加载自定义模块
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
#设置库文件路径
set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
#设置可执行程序路径
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
#设置子目录

LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})

set(HiredisDemo_Root ${CMAKE_CURRENT_SOURCE_DIR}/src)

INCLUDE_DIRECTORIES(${HiredisDemo_Root})

if (MSVC)
    set(VS_FALGS "/wd4819 /wd4996 /wd4018 /wd4267 /wd4244 /wd4101 /wd4828 /wd4309 /wd4573")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:sizedDealloc- /MP /utf-8")
    set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} /MDd /Od /ZI /DEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} /MD /O2 /GT /GL")
else (MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fpermissive")
    set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -g -ggdb")
    set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3")
endif (MSVC)

#hiredis
set(HIREDIS_ROOT_PATH ${THIRDPARTY}/hiredis)
set(HIREDIS_INCLUDE_PATH ${HIREDIS_ROOT_PATH}/include)
set(HIREDIS_LIB_PATH ${HIREDIS_ROOT_PATH}/lib/${system}/${platform}/${CMAKE_BUILD_TYPE})
INCLUDE_DIRECTORIES(${HIREDIS_INCLUDE_PATH})
link_directories(${HIREDIS_LIB_PATH})
list(APPEND LINK_LIB_LIST ${HIREDIS_LIB})

if (WIN32)
    add_definitions(-D_WIN32 -D_WIN32_WINNT=0x601 -DWIN32_LEAN_AND_MEAN -DOS_WINDOWS)
    add_definitions(-DNOMINMAX)
else (WIN32)
    add_definitions(-DOS_LINUX)
endif (WIN32)
add_definitions(-DLIBMOSQUITTO_STATIC)
add_definitions(-DTIXML_USE_STL)
add_definitions(-DS_HTTP_SERVER_USE_STATIC_LIB)

set (CURRENT_SOURCES main.cpp RedisPool.cpp)

add_executable(hiredis-demo ${CURRENT_SOURCES} ${Src_list})

if (WIN32)
    target_link_libraries(hiredis-demo ${LINK_LIB_LIST} winmm WS2_32 Iphlpapi shlwapi)
else (WIN32)
    target_link_libraries(hiredis-demo ${LINK_LIB_LIST} pthread sqlite3 uuid dl)
endif (WIN32)
